Resources:
  KinesisDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}-${self:custom.stage}-kinesis-delivery-role
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  KinesisDeliveryToS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ${self:service}-${self:custom.stage}-kinesis-delivery-to-s3-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisRaw}'
              - !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisRaw}*'
      Roles:
        - !Ref KinesisDeliveryRole
        
  KinesisDeliveryStream1:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: ${self:service}-${self:custom.stage}-kinesis-delivery-stream
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisRaw}'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 3
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt KinesisDeliveryRole.Arn


  
        
       
