Resources:
  KinesisDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}-${self:custom.stage}-kinesis-delivery-role
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  KinesisDeliveryToS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ${self:service}-${self:custom.stage}-kinesis-delivery-to-s3-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisDestination}'
              - !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisDestination}*'
              - !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisRaw}'
              - !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisRaw}*'

      Roles:
        - !Ref KinesisDeliveryRole

  KinesisInvokeLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ${self:service}-${self:custom.stage}-kinesis-invoke-lambda-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: 
              - !GetAtt TransformLambdaFunction.Arn
      Roles:
        - !Ref KinesisDeliveryRole

  KinesisDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: ${self:service}-${self:custom.stage}-kinesis-delivery-stream
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisDestination}'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 3
        S3BackupMode: Enabled 
        S3BackupConfiguration:
          BucketARN: !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisRaw}'
          RoleARN: !GetAtt KinesisDeliveryRole.Arn
        CompressionFormat: GZIP
        Prefix: firehose/
        RoleARN: !GetAtt KinesisDeliveryRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
          - Parameters:
              - ParameterName: LambdaArn
                ParameterValue: !GetAtt TransformLambdaFunction.Arn 
            Type: Lambda

  LambdaIoTRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}-${self:custom.stage}-Lambda-IoT-role
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
            
  LambdaInvokeIOTPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaInvokeIOTPolicy 
      PolicyDocument:
        Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
            - Effect: Allow
              Action:
              - 'iot:DescribeThing'
              Resource: "*"
            - Effect: "Allow"
              Action:
              - "s3:PutObject"
              Resource: '*'
              #- !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisDestination}'
              #- !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisDestination}*'
              #- !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisBackup}'
              #- !Sub 'arn:aws:s3:::${self:custom.S3BucketNameForKinesisBackup}*'
      Roles: 
        - !Ref LambdaIoTRole
