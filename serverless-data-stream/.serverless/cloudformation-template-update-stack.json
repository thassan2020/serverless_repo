{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "TransformLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/iot-serverless-tarek-30-test-data-transform-lambda"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "iot-serverless-tarek-30",
                  "test",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/iot-serverless-tarek-30-test*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/iot-serverless-tarek-30-test*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "iot-serverless-tarek-30",
              "test",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "TransformLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/iot-serverless-tarek-30/test/1650926060392-2022-04-25T22:34:20.392Z/iot-serverless-tarek-30.zip"
        },
        "Handler": "handler.transform",
        "Runtime": "nodejs12.x",
        "FunctionName": "iot-serverless-tarek-30-test-data-transform-lambda",
        "MemorySize": 1024,
        "Timeout": 60,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TransformLogGroup"
      ]
    },
    "TransformLambdaVersiondPIbFwv7RdiiHtWzB1SkZgzGQB7BJx3LZ1pBLkP8w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TransformLambdaFunction"
        },
        "CodeSha256": "35E6KwiLvh/sngf7tAt5UHPlVkR9foC3FCCgP7K7Tjo="
      }
    },
    "S3BucketForKinesisDestination": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "iot-serverless-tarek-30-test-kinesis-destination",
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "S3BucketForKinesisRaw": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "iot-serverless-tarek-30-test-kinesis-raw",
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "KinesisDeliveryRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "iot-serverless-tarek-30-test-kinesis-delivery-role",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Ref": "AWS::AccountId"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "KinesisDeliveryToS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "iot-serverless-tarek-30-test-kinesis-delivery-to-s3-policy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::iot-serverless-tarek-30-test-kinesis-destination"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::iot-serverless-tarek-30-test-kinesis-destination*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "KinesisDeliveryRole"
          }
        ]
      }
    },
    "KinesisInvokeLambdaPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "iot-serverless-tarek-30-test-kinesis-invoke-lambda-policy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TransformLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "KinesisDeliveryRole"
          }
        ]
      }
    },
    "KinesisDeliveryStream": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamName": "iot-serverless-tarek-30-test-kinesis-delivery-stream",
        "ExtendedS3DestinationConfiguration": {
          "S3BackupMode": "Enabled",
          "S3BackupConfiguration": {
            "BucketARN": {
              "REF": "MyBackupBucket"
            },
            "RoleARN": {
              "Fn::GetAtt": [
                "KinesisDeliveryRole",
                "Arn"
              ]
            }
          },
          "BucketARN": {
            "Fn::Sub": "arn:aws:s3:::iot-serverless-tarek-30-test-kinesis-destination"
          },
          "BufferingHints": {
            "IntervalInSeconds": 60,
            "SizeInMBs": 3
          },
          "CompressionFormat": "UNCOMPRESSED",
          "Prefix": "firehose/",
          "RoleARN": {
            "Fn::GetAtt": [
              "KinesisDeliveryRole",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": true,
            "Processors": [
              {
                "Parameters": [
                  {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "TransformLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ],
                "Type": "Lambda"
              }
            ]
          }
        }
      }
    },
    "IoTCoreRuleSendingToKinesis": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": "iot_serverless_test_send_to_kinesis_rule_30",
        "TopicRulePayload": {
          "Actions": [
            {
              "Firehose": {
                "DeliveryStreamName": {
                  "Ref": "KinesisDeliveryStream"
                },
                "RoleArn": {
                  "Fn::GetAtt": [
                    "KinesisRuleRole",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "RuleDisabled": false,
          "Sql": {
            "Fn::Sub": "SELECT topic(3) as clientid FROM '$aws/things/+/shadow/name/+/update/+'"
          }
        }
      }
    },
    "KinesisRuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "iot-serverless-tarek-30_test_sending_to_kinesis_role",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "iot.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "firehose:PutRecord",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "KinesisDeliveryStream",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            },
            "PolicyName": "iot-serverless-tarek-30_test_sending_to_kinesis_policy"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-iot-serverless-tarek-30-test-ServerlessDeploymentBucketName"
      }
    },
    "TransformLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TransformLambdaVersiondPIbFwv7RdiiHtWzB1SkZgzGQB7BJx3LZ1pBLkP8w"
      },
      "Export": {
        "Name": "sls-iot-serverless-tarek-30-test-TransformLambdaFunctionQualifiedArn"
      }
    },
    "S3BucketForKinesisDestinationName": {
      "Value": {
        "Ref": "S3BucketForKinesisDestination"
      }
    },
    "S3BucketForKinesisRawName": {
      "Value": {
        "Ref": "S3BucketForKinesisRaw"
      }
    }
  }
}